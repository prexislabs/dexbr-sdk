{"version":3,"file":"dexbr-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  TBSC = 97,\n  BSC = 56\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x56216A033FA460f81CF2e5d2240e77a9372433c6'\n\nexport const INIT_CODE_HASH = '0x4bc312006898edda53e49849c59c1a7f70be33c5b1a8dc4a1e42c5815afd10a0'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.TBSC]: new Token(\n    ChainId.TBSC, '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd', \n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC, '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c', \n    18,\n    'WETH',\n    'Wrapped Ether'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000\n} from '../constants'\nimport IUniswapV2Pair from 'dexbr-v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","MAINNET","Token","chainId","decimals","symbol","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equal","sortsBefore","toLowerCase","WETH","TBSC","BSC","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","adjusted","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","getSlippage","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":";;;;;;;;;;;;;;;IAKYA;;AAAZ,WAAYA;EACVA,+BAAA,YAAA;EACAA,6BAAA,SAAA;EACAA,4BAAA,QAAA;AACD,CAJD,EAAYA,OAAO,KAAPA,OAAO,KAAA,CAAnB;;IAMYC;;AAAZ,WAAYA;EACVA,uCAAA,gBAAA;EACAA,wCAAA,iBAAA;AACD,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;;IAKYC;;AAAZ,WAAYA;EACVA,oCAAA,eAAA;EACAA,uCAAA,kBAAA;EACAA,kCAAA,aAAA;AACD,CAJD,EAAYA,QAAQ,KAARA,QAAQ,KAAA,CAApB;;IAMaC,eAAe,GAAG;IAElBC,cAAc,GAAG;IAEjBC,iBAAiB,gBAAGC,IAAI,CAACC,MAAL,CAAY,IAAZ;;AAG1B,IAAMC,IAAI,gBAAGF,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAME,GAAG,gBAAGH,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMG,GAAG,gBAAGJ,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAZ;AACA,IAAMI,KAAK,gBAAGL,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAd;AACA,IAAMK,IAAI,gBAAGN,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAb;AACA,IAAMM,GAAG,gBAAGP,IAAI,CAACC,MAAL,CAAY,EAAZ,CAAZ;AACA,IAAMO,IAAI,gBAAGR,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMQ,IAAI,gBAAGT,IAAI,CAACC,MAAL,CAAY,GAAZ,CAAb;AACA,IAAMS,KAAK,gBAAGV,IAAI,CAACC,MAAL,CAAY,IAAZ,CAAd;AAEP,IAAYU,YAAZ;;AAAA,WAAYA;EACVA,qBAAA,UAAA;EACAA,uBAAA,YAAA;AACD,CAHD,EAAYA,YAAY,KAAZA,YAAY,KAAA,CAAxB;;AAKO,IAAMC,oBAAoB,sDAC9BD,YAAY,CAACE,KADiB,iBACTb,IAAI,CAACC,MAAL,CAAY,MAAZ,CADS,wBAE9BU,YAAY,CAACG,OAFiB,iBAEPd,IAAI,CAACC,MAAL,CAAY,oEAAZ,CAFO,wBAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CP;AACA,IAAMc,iBAAiB,IAAG,oBAAoBC,MAAvB,CAAvB;AAEA,IAAaC,yBAAb;EAAA;;EAGE;;;IACE;IAHc,iCAAA,GAAoC,IAApC;IAId,MAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,gCAA4B,wEAAWC,SAAvC;;;;EAN3B;AAAA,iCAA+CC,KAA/C;AAUA,IAAaC,4BAAb;EAAA;;EAGE;;;IACE;IAHc,qCAAA,GAAuC,IAAvC;IAId,OAAKL,IAAL,GAAY,OAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIH,iBAAJ,EAAuBC,MAAM,CAACI,cAAP,iCAA4B,2EAAWC,SAAvC;;;;EAN3B;AAAA,iCAAkDC,KAAlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCNgBE,6BAA6BC,OAAaC;EACxD,CAAU1B,IAAI,CAAC2B,kBAAL,CAAwBF,KAAxB,EAA+BvB,IAA/B,CAAV,2CAAA0B,SAAS,QAA0CH,KAA1C,kBAA4DC,YAA5D,OAAT,GAAAE,SAAS,OAAT;EACA,CAAU5B,IAAI,CAAC6B,eAAL,CAAqBJ,KAArB,EAA4Bb,oBAAoB,CAACc,YAAD,CAAhD,CAAV,2CAAAE,SAAS,QAAqEH,KAArE,kBAAuFC,YAAvF,OAAT,GAAAE,SAAS,OAAT;AACD;;AAGD,SAAgBE,wBAAwBC;EACtC,IAAI;IACF,IAAMC,kBAAkB,GAAGC,UAAU,CAACF,OAAD,CAArC;IACA,wCAAAG,OAAO,CAACH,OAAO,KAAKC,kBAAb,EAAoCD,OAApC,0BAAP;IACA,OAAOC,kBAAP;GAHF,CAIE,OAAOG,KAAP,EAAc;IACd,yCAAAP,SAAS,QAAWG,OAAX,8BAAT,GAAAH,SAAS,OAAT;;AAEH;AAED,SAAgBQ,eAAeC;EAC7B,OAAOA,SAAS,YAAYrC,IAArB,GACHqC,SADG,GAEH,OAAOA,SAAP,KAAqB,QAArB,GACArC,IAAI,CAACC,MAAL,CAAYoC,SAAS,CAACC,QAAV,EAAZ,CADA,GAEAtC,IAAI,CAACC,MAAL,CAAYoC,SAAZ,CAJJ;AAKD;;AAGD,SAAgBE,KAAKC;EACnBhB,4BAA4B,CAACgB,CAAD,EAAI7B,YAAY,CAACG,OAAjB,CAA5B;EACA,IAAI2B,CAAC,GAASvC,IAAd;EACA,IAAIwC,CAAJ;;EACA,IAAI1C,IAAI,CAAC2C,WAAL,CAAiBH,CAAjB,EAAoBnC,KAApB,CAAJ,EAAgC;IAC9BoC,CAAC,GAAGD,CAAJ;IACAE,CAAC,GAAG1C,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYL,CAAZ,EAAepC,GAAf,CAAT,EAA8BD,GAA9B,CAAJ;;IACA,OAAOH,IAAI,CAAC8C,QAAL,CAAcJ,CAAd,EAAiBD,CAAjB,CAAP,EAA4B;MAC1BA,CAAC,GAAGC,CAAJ;MACAA,CAAC,GAAG1C,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYL,CAAZ,EAAeE,CAAf,CAAT,EAA4BA,CAA5B,CAAZ,EAA4CtC,GAA5C,CAAJ;;GALJ,MAOO,IAAIJ,IAAI,CAAC+C,QAAL,CAAcP,CAAd,EAAiBtC,IAAjB,CAAJ,EAA4B;IACjCuC,CAAC,GAAGtC,GAAJ;;;EAEF,OAAOsC,CAAP;AACD;AAGD;;AACA,SAAgBO,aAAgBC,OAAYL,KAAQM,SAAiBC;EACnE,EAAUD,OAAO,GAAG,CAApB,4CAAAtB,SAAS,QAAc,eAAd,CAAT,GAAAA,SAAS,OAAT;;EAEA,EAAUqB,KAAK,CAACG,MAAN,IAAgBF,OAA1B,4CAAAtB,SAAS,QAA0B,YAA1B,CAAT,GAAAA,SAAS,OAAT;;EAGA,IAAIqB,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;IACtBH,KAAK,CAACI,IAAN,CAAWT,GAAX;IACA,OAAO,IAAP;GAFF,MAGO;IACL,IAAMU,MAAM,GAAGL,KAAK,CAACG,MAAN,KAAiBF,OAAhC,CADK;;IAGL,IAAII,MAAM,IAAIH,UAAU,CAACF,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAN,EAA0BR,GAA1B,CAAV,IAA4C,CAA1D,EAA6D;MAC3D,OAAOA,GAAP;;;IAGF,IAAIW,EAAE,GAAG,CAAT;QACEC,EAAE,GAAGP,KAAK,CAACG,MADb;;IAGA,OAAOG,EAAE,GAAGC,EAAZ,EAAgB;MACd,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAA1B;;MACA,IAAIL,UAAU,CAACF,KAAK,CAACQ,GAAD,CAAN,EAAab,GAAb,CAAV,IAA+B,CAAnC,EAAsC;QACpCW,EAAE,GAAGE,GAAG,GAAG,CAAX;OADF,MAEO;QACLD,EAAE,GAAGC,GAAL;;;;IAGJR,KAAK,CAACS,MAAN,CAAaH,EAAb,EAAiB,CAAjB,EAAoBX,GAApB;IACA,OAAOU,MAAM,GAAGL,KAAK,CAACU,GAAN,EAAH,GAAkB,IAA/B;;AAEH;;;ACvED,IAAIC,KAAK,wBACNlE,OAAO,CAACmE,OADF,IACY;EACjB,8CAA8C,CAD7B;;AAAA,CADZ,SAAT;AAMA,IAAaC,KAAb;EA8BE,eAAYC,OAAZ,EAA8BhC,OAA9B,EAA+CiC,QAA/C,EAAiEC,MAAjE,EAAkF/C,IAAlF;IACEM,4BAA4B,CAACxB,IAAI,CAACC,MAAL,CAAY+D,QAAZ,CAAD,EAAwBrD,YAAY,CAACE,KAArC,CAA5B;IAEA,KAAKkD,OAAL,GAAeA,OAAf;IACA,KAAKhC,OAAL,GAAeD,uBAAuB,CAACC,OAAD,CAAtC;IACA,KAAKiC,QAAL,GAAgBA,QAAhB;IACA,IAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC,KAAKA,MAAL,GAAcA,MAAd;IAChC,IAAI,OAAO/C,IAAP,KAAgB,QAApB,EAA8B,KAAKA,IAAL,GAAYA,IAAZ;;;EArClC,MAOegD,SAPf,sBAQIH,OARJ,EASIhC,OATJ,EAUIoC,QAVJ,EAWIF,MAXJ,EAYI/C,IAZJ;IAAA;;;mCAcUkD;QAaN,OAAO,IAAIN,KAAJ,CAAUC,OAAV,EAAmBhC,OAAnB,EAA4BqC,cAA5B,EAA4CH,MAA5C,EAAoD/C,IAApD,CAAP;;;UAjBAiD,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAACP,OAAD,CAAX;;mBAK3B,mBAAOH,KAAP,+DAAO,QAAQG,OAAR,CAAP,oDAAO,gBAAmBhC,OAAnB,CAAP,MAAuC;;6CACnC6B,KAAK,CAACG,OAAD,CAAL,CAAehC,OAAf,qBACM,IAAIwC,QAAJ,CAAaxC,OAAb,EAAsByC,KAAtB,EAA6BL,QAA7B,EAAuCH,QAAvC,GAAkDS,IAAlD,CAAuD,UAACT,QAAD;;;QAC3DJ,KAAK,gBACAA,KADA,6BAEFG,OAFE,4BAGEH,KAHF,4CAGE,QAAQG,OAAR,CAHF,6BAIAhC,OAJA,IAIUiC,QAJV,0BAAL;QAOA,OAAOA,QAAP;OARI;KAjBhB;MAAA;;;;EAAA;;EAAA,OAwCEU,MAxCF,GAwCE,gBAAOC,KAAP;IACE,IAAMC,KAAK,GAAG,KAAKb,OAAL,KAAiBY,KAAK,CAACZ,OAAvB,IAAkC,KAAKhC,OAAL,KAAiB4C,KAAK,CAAC5C,OAAvE;;IACA,IAAI6C,KAAJ,EAAW;MACT,EAAU,KAAKZ,QAAL,KAAkBW,KAAK,CAACX,QAAlC,4CAAApC,SAAS,QAAmC,UAAnC,CAAT,GAAAA,SAAS,OAAT;MACA,IAAI,KAAKqC,MAAL,IAAeU,KAAK,CAACV,MAAzB,EAAiC,EAAU,KAAKA,MAAL,KAAgBU,KAAK,CAACV,MAAhC,4CAAArC,SAAS,QAA+B,QAA/B,CAAT,GAAAA,SAAS,OAAT;MACjC,IAAI,KAAKV,IAAL,IAAayD,KAAK,CAACzD,IAAvB,EAA6B,EAAU,KAAKA,IAAL,KAAcyD,KAAK,CAACzD,IAA9B,4CAAAU,SAAS,QAA2B,MAA3B,CAAT,GAAAA,SAAS,OAAT;;;IAE/B,OAAOgD,KAAP;GA/CJ;;EAAA,OAkDEC,WAlDF,GAkDE,qBAAYF,KAAZ;IACE,EAAU,KAAKZ,OAAL,KAAiBY,KAAK,CAACZ,OAAjC,4CAAAnC,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU,KAAKG,OAAL,KAAiB4C,KAAK,CAAC5C,OAAjC,4CAAAH,SAAS,QAAiC,WAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,KAAKG,OAAL,CAAa+C,WAAb,KAA6BH,KAAK,CAAC5C,OAAN,CAAc+C,WAAd,EAApC;GArDJ;;EAAA;AAAA;AAyDA,IAAaC,IAAI,sBACdrF,OAAO,CAACmE,OADM,iBACI,IAAIC,KAAJ,CACjBpE,OAAO,CAACmE,OADS,EAEjB,4CAFiB,EAGjB,EAHiB,EAIjB,MAJiB,EAKjB,eALiB,CADJ,QAQdnE,OAAO,CAACsF,IARM,iBAQC,IAAIlB,KAAJ,CACdpE,OAAO,CAACsF,IADM,EACA,4CADA,EAEd,EAFc,EAGd,MAHc,EAId,eAJc,CARD,QAcdtF,OAAO,CAACuF,GAdM,iBAcA,IAAInB,KAAJ,CACbpE,OAAO,CAACuF,GADK,EACA,4CADA,EAEb,EAFa,EAGb,MAHa,EAIb,eAJa,CAdA,QAAV;;;AC/DP,IAAMC,OAAO,gBAAGC,QAAQ,CAACC,QAAD,CAAxB;AACA,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAMC,qBAAqB,sDACxB3F,QAAQ,CAAC4F,UADe,IACFN,OAAO,CAACM,UADN,wBAExB5F,QAAQ,CAAC6F,aAFe,IAECP,OAAO,CAACO,aAFT,wBAGxB7F,QAAQ,CAAC8F,QAHe,IAGJR,OAAO,CAACQ,QAHJ,wBAA3B;AAMA,IAAMC,eAAe,4CAClB/F,QAAQ,CAAC4F,UADS,KAAA,mBAElB5F,QAAQ,CAAC6F,aAFS,KAAA,mBAGlB7F,QAAQ,CAAC8F,QAHS,KAAA,mBAArB;AAMA,IAAaE,QAAb;EAIE,kBAAYC,SAAZ,EAAkCC,WAAlC;QAAkCA;MAAAA,cAAyB3F;;;IACzD,KAAK0F,SAAL,GAAiBzD,cAAc,CAACyD,SAAD,CAA/B;IACA,KAAKC,WAAL,GAAmB1D,cAAc,CAAC0D,WAAD,CAAjC;GANJ;;;EAAA;;EAAA,OAmBEC,MAnBF,GAmBE;IACE,OAAO,IAAIH,QAAJ,CAAa,KAAKE,WAAlB,EAA+B,KAAKD,SAApC,CAAP;GApBJ;;EAAA,OAuBEjD,GAvBF,GAuBE,aAAI+B,KAAJ;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;;IACA,IAAI3E,IAAI,CAAC4E,KAAL,CAAW,KAAKkB,WAAhB,EAA6BE,WAAW,CAACF,WAAzC,CAAJ,EAA2D;MACzD,OAAO,IAAIF,QAAJ,CAAa5F,IAAI,CAAC4C,GAAL,CAAS,KAAKiD,SAAd,EAAyBG,WAAW,CAACH,SAArC,CAAb,EAA8D,KAAKC,WAAnE,CAAP;;;IAEF,OAAO,IAAIF,QAAJ,CACL5F,IAAI,CAAC4C,GAAL,CACE5C,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADF,EAEE9F,IAAI,CAACiG,QAAL,CAAcD,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL9F,IAAI,CAACiG,QAAL,CAAc,KAAKH,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CALK,CAAP;GA5BJ;;EAAA,OAqCEI,QArCF,GAqCE,kBAASvB,KAAT;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;;IACA,IAAI3E,IAAI,CAAC4E,KAAL,CAAW,KAAKkB,WAAhB,EAA6BE,WAAW,CAACF,WAAzC,CAAJ,EAA2D;MACzD,OAAO,IAAIF,QAAJ,CAAa5F,IAAI,CAACkG,QAAL,CAAc,KAAKL,SAAnB,EAA8BG,WAAW,CAACH,SAA1C,CAAb,EAAmE,KAAKC,WAAxE,CAAP;;;IAEF,OAAO,IAAIF,QAAJ,CACL5F,IAAI,CAACkG,QAAL,CACElG,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADF,EAEE9F,IAAI,CAACiG,QAAL,CAAcD,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFF,CADK,EAKL9F,IAAI,CAACiG,QAAL,CAAc,KAAKH,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CALK,CAAP;GA1CJ;;EAAA,OAmDEhD,QAnDF,GAmDE,kBAAS6B,KAAT;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAAC8C,QAAL,CACL9C,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAEL9F,IAAI,CAACiG,QAAL,CAAcD,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GArDJ;;EAAA,OA2DEK,OA3DF,GA2DE,iBAAQxB,KAAR;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAAC4E,KAAL,CACL5E,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAEL9F,IAAI,CAACiG,QAAL,CAAcD,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GA7DJ;;EAAA,OAmEEnD,WAnEF,GAmEE,qBAAYgC,KAAZ;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;IACA,OAAO3E,IAAI,CAAC2C,WAAL,CACL3C,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAEL9F,IAAI,CAACiG,QAAL,CAAcD,WAAW,CAACH,SAA1B,EAAqC,KAAKC,WAA1C,CAFK,CAAP;GArEJ;;EAAA,OA2EEG,QA3EF,GA2EE,kBAAStB,KAAT;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;IACA,OAAO,IAAIiB,QAAJ,CACL5F,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACH,SAA1C,CADK,EAEL7F,IAAI,CAACiG,QAAL,CAAc,KAAKH,WAAnB,EAAgCE,WAAW,CAACF,WAA5C,CAFK,CAAP;GA7EJ;;EAAA,OAmFEjD,MAnFF,GAmFE,gBAAO8B,KAAP;IACE,IAAMqB,WAAW,GAAGrB,KAAK,YAAYiB,QAAjB,GAA4BjB,KAA5B,GAAoC,IAAIiB,QAAJ,CAAaxD,cAAc,CAACuC,KAAD,CAA3B,CAAxD;IACA,OAAO,IAAIiB,QAAJ,CACL5F,IAAI,CAACiG,QAAL,CAAc,KAAKJ,SAAnB,EAA8BG,WAAW,CAACF,WAA1C,CADK,EAEL9F,IAAI,CAACiG,QAAL,CAAc,KAAKH,WAAnB,EAAgCE,WAAW,CAACH,SAA5C,CAFK,CAAP;GArFJ;;EAAA,OA2FEO,aA3FF,GA2FE,uBACEC,iBADF,EAEEC,MAFF,EAGEC,QAHF;QAEED;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;QACnCD;MAAAA,WAAqB3G,QAAQ,CAAC6F;;;IAE9B,CAAUgB,MAAM,CAACC,SAAP,CAAiBL,iBAAjB,CAAV,2CAAAzE,SAAS,QAAyCyE,iBAAzC,yBAAT,GAAAzE,SAAS,OAAT;IACA,EAAUyE,iBAAiB,GAAG,CAA9B,4CAAAzE,SAAS,QAA2ByE,iBAA3B,uBAAT,GAAAzE,SAAS,OAAT;IAEAsD,OAAO,CAACyB,GAAR,CAAY;MAAEC,SAAS,EAAEP,iBAAiB,GAAG,CAAjC;MAAoCE,QAAQ,EAAEhB,qBAAqB,CAACgB,QAAD;KAA/E;IACA,IAAMM,QAAQ,GAAG,IAAI3B,OAAJ,CAAY,KAAKW,SAAL,CAAevD,QAAf,EAAZ,EACdwE,GADc,CACV,KAAKhB,WAAL,CAAiBxD,QAAjB,EADU,EAEdyE,mBAFc,CAEMV,iBAFN,CAAjB;IAGA,OAAOQ,QAAQ,CAAC1B,QAAT,CAAkB0B,QAAQ,CAACG,aAAT,EAAlB,EAA4CV,MAA5C,CAAP;GAvGJ;;EAAA,OA0GEW,OA1GF,GA0GE,iBACED,aADF,EAEEV,MAFF,EAGEC,QAHF;QAEED;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;QACnCD;MAAAA,WAAqB3G,QAAQ,CAAC6F;;;IAE9B,CAAUgB,MAAM,CAACC,SAAP,CAAiBM,aAAjB,CAAV,2CAAApF,SAAS,QAAqCoF,aAArC,yBAAT,GAAApF,SAAS,OAAT;IACA,EAAUoF,aAAa,IAAI,CAA3B,4CAAApF,SAAS,QAAwBoF,aAAxB,mBAAT,GAAApF,SAAS,OAAT;IAEAyD,GAAG,CAAC6B,EAAJ,GAASF,aAAT;IACA3B,GAAG,CAAC8B,EAAJ,GAASxB,eAAe,CAACY,QAAD,CAAxB;IACA,OAAO,IAAIlB,GAAJ,CAAQ,KAAKQ,SAAL,CAAevD,QAAf,EAAR,EAAmCwE,GAAnC,CAAuC,KAAKhB,WAAL,CAAiBxD,QAAjB,EAAvC,EAAoE6C,QAApE,CAA6E6B,aAA7E,EAA4FV,MAA5F,CAAP;GApHJ;;EAAA;IAAA;IAAA,KAUE;MACE,OAAOtG,IAAI,CAAC6C,MAAL,CAAY,KAAKgD,SAAjB,EAA4B,KAAKC,WAAjC,CAAP;KAXJ;;;IAAA;IAAA,KAeE;MACE,OAAO,IAAIF,QAAJ,CAAa5F,IAAI,CAACoH,SAAL,CAAe,KAAKvB,SAApB,EAA+B,KAAKC,WAApC,CAAb,EAA+D,KAAKA,WAApE,CAAP;;;;EAhBJ;AAAA;;ACfA,IAAMT,KAAG,gBAAGF,QAAQ,CAACG,IAAD,CAApB;AAEA,IAAa+B,WAAb;EAAA;;;EAIE,qBAAYC,KAAZ,EAA0BC,MAA1B;;;IACE,IAAMC,YAAY,GAAGpF,cAAc,CAACmF,MAAD,CAAnC;IACA/F,4BAA4B,CAACgG,YAAD,EAAe7G,YAAY,CAACG,OAA5B,CAA5B;IAEA,6BAAM0G,YAAN,EAAoBxH,IAAI,CAACyH,YAAL,CAAkBlH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYqH,KAAK,CAACtD,QAAlB,CAAvB,CAApB;IACA,MAAKsD,KAAL,GAAaA,KAAb;;;;EATJ;;EAAA,OAgBE1E,GAhBF,GAgBE,aAAI+B,KAAJ;IACE,CAAU,KAAK2C,KAAL,CAAW5C,MAAX,CAAkBC,KAAK,CAAC2C,KAAxB,CAAV,2CAAA1F,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAIyF,WAAJ,CAAgB,KAAKC,KAArB,EAA4BtH,IAAI,CAAC4C,GAAL,CAAS,KAAK8E,GAAd,EAAmB/C,KAAK,CAAC+C,GAAzB,CAA5B,CAAP;GAlBJ;;EAAA,OAqBExB,QArBF,GAqBE,kBAASvB,KAAT;IACE,CAAU,KAAK2C,KAAL,CAAW5C,MAAX,CAAkBC,KAAK,CAAC2C,KAAxB,CAAV,2CAAA1F,SAAS,QAAiC,OAAjC,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAIyF,WAAJ,CAAgB,KAAKC,KAArB,EAA4BtH,IAAI,CAACkG,QAAL,CAAc,KAAKwB,GAAnB,EAAwB/C,KAAK,CAAC+C,GAA9B,CAA5B,CAAP;GAvBJ;;EAAA,OA0BEtB,aA1BF,GA0BE,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;MAAAA,oBAA4B;;;QAAoBE;MAAAA,WAAqB3G,QAAQ,CAAC4F;;;IAC1F,2BAAaY,aAAb,YAA2BC,iBAA3B,EAA8CC,MAA9C,EAAsDC,QAAtD;GA3BJ;;EAAA,OA8BEU,OA9BF,GA8BE,iBACED,aADF,EAEEV,MAFF,EAGEC,QAHF;QACES;MAAAA,gBAAwB,KAAKM,KAAL,CAAWtD;;;QAEnCuC;MAAAA,WAAqB3G,QAAQ,CAAC4F;;;IAE9B,EAAUwB,aAAa,IAAI,KAAKM,KAAL,CAAWtD,QAAtC,4CAAApC,SAAS,QAAuC,UAAvC,CAAT,GAAAA,SAAS,OAAT;IACA,2BAAaqF,OAAb,YAAqBD,aAArB,EAAoCV,MAApC,EAA4CC,QAA5C;GApCJ;;EAAA,OAuCEoB,OAvCF,GAuCE,iBAAQrB,MAAR;QAAQA;MAAAA,SAAiB;QAAEE,cAAc,EAAE;;;;IACzCnB,KAAG,CAAC6B,EAAJ,GAAS,KAAKI,KAAL,CAAWtD,QAApB;IACA,OAAO,IAAIqB,KAAJ,CAAQ,KAAKQ,SAAL,CAAevD,QAAf,EAAR,EAAmCwE,GAAnC,CAAuC,KAAKhB,WAAL,CAAiBxD,QAAjB,EAAvC,EAAoE6C,QAApE,CAA6EmB,MAA7E,CAAP;GAzCJ;;EAAA;IAAA;IAAA,KAYE;MACE,OAAO,KAAKT,SAAZ;;;;EAbJ;AAAA,EAAiCD,QAAjC;;ACaA,IAAIhC,OAAK,GAAqE,EAA9E;AAEA,IAAagE,IAAb;EAoCE,cAAYC,YAAZ,EAAuCC,YAAvC;IACE,IAAMC,YAAY,GAAGF,YAAY,CAACP,KAAb,CAAmBzC,WAAnB,CAA+BiD,YAAY,CAACR,KAA5C;MACjB,CAACO,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;IAGA,KAAKG,cAAL,GAAsB,IAAIlE,KAAJ,CACpBiE,YAAY,CAAC,CAAD,CAAZ,CAAgBT,KAAhB,CAAsBvD,OADF,EAEpB6D,IAAI,CAAC3F,UAAL,CAAgB8F,YAAY,CAAC,CAAD,CAAZ,CAAgBT,KAAhC,EAAuCS,YAAY,CAAC,CAAD,CAAZ,CAAgBT,KAAvD,CAFoB,EAGpB,EAHoB,EAIpB,QAJoB,EAKpB,YALoB,CAAtB;IAOA,KAAKS,YAAL,GAAoBA,YAApB;;;EA/CJ,KAIS9F,UAJT,GAIE,oBAAkBgG,MAAlB,EAAiCC,MAAjC;;;IACE,IAAMC,MAAM,GAAGF,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAACD,MAAD,EAASC,MAAT,CAA7B,GAAgD,CAACA,MAAD,EAASD,MAAT,CAA/D;;IAEA,IAAI,WAAArE,OAAK,UAAL,iEAAQuE,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAlB,iFAA6BoG,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAvC,OAAoDqG,SAAxD,EAAmE;MAAA;;MACjExE,OAAK,gBACAA,OADA,6BAEFuE,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAFR,4BAGE6B,OAHF,4CAGE,QAAQuE,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAlB,CAHF,6BAIAoG,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAJV,IAIoBsG,iBAAiB,CACpCxI,eADoC,EAEpCyI,SAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACJ,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAX,EAAoBoG,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAA9B,CAAzB,CAAL,CAAZ,CAF2B,EAGpCjC,cAHoC,CAJrC,0BAAL;;;IAaF,OAAO8D,OAAK,CAACuE,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAX,CAAL,CAAyBoG,MAAM,CAAC,CAAD,CAAN,CAAUpG,OAAnC,CAAP;GArBJ;;EAAA,KAwBemC,SAxBf,sBAyBI+D,MAzBJ,EA0BIC,MA1BJ,EA2BI/D,QA3BJ;IAAA;UA2BIA,wBAAAA,WAAWE,kBAAkB,CAACC,UAAU,CAAC2D,MAAM,CAAClE,OAAR,CAAX;MAE7B,EAAUkE,MAAM,CAAClE,OAAP,KAAmBmE,MAAM,CAACnE,OAApC,4CAAAnC,SAAS,QAAoC,UAApC,CAAT,GAAAA,SAAS,OAAT;MACA,IAAMG,OAAO,GAAG6F,IAAI,CAAC3F,UAAL,CAAgBgG,MAAhB,EAAwBC,MAAxB,CAAhB;6BACqC,IAAI3D,QAAJ,CAAaxC,OAAb,EAAsByG,cAAc,CAACC,GAArC,EAA0CtE,QAA1C,EAAoDuE,WAApD;YAA9BC;YAAWC;QAClB,IAAMC,QAAQ,GAAGZ,MAAM,CAACpD,WAAP,CAAmBqD,MAAnB,IAA6B,CAACS,SAAD,EAAYC,SAAZ,CAA7B,GAAsD,CAACA,SAAD,EAAYD,SAAZ,CAAvE;QACA,OAAO,IAAIf,IAAJ,CAAS,IAAIP,WAAJ,CAAgBY,MAAhB,EAAwBY,QAAQ,CAAC,CAAD,CAAhC,CAAT,EAA+C,IAAIxB,WAAJ,CAAgBa,MAAhB,EAAwBW,QAAQ,CAAC,CAAD,CAAhC,CAA/C,CAAP;;KAjCJ;MAAA;;;;EAAA;;EAAA,OAkEEC,SAlEF,GAkEE,mBAAUxB,KAAV;IACE,EAAUA,KAAK,CAAC5C,MAAN,CAAa,KAAKqE,MAAlB,KAA6BzB,KAAK,CAAC5C,MAAN,CAAa,KAAKsE,MAAlB,CAAvC,4CAAApH,SAAS,QAAyD,OAAzD,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO0F,KAAK,CAAC5C,MAAN,CAAa,KAAKqE,MAAlB,IAA4B,KAAKE,QAAjC,GAA4C,KAAKC,QAAxD;GApEJ;;EAAA,OAuEEC,eAvEF,GAuEE,yBAAgBC,WAAhB;IACE,EAAUA,WAAW,CAAC9B,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKqE,MAA9B,KAAyCK,WAAW,CAAC9B,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKsE,MAA9B,CAAnD,4CAAApH,SAAS,QAAiF,OAAjF,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI5B,IAAI,CAAC4E,KAAL,CAAW,KAAKqE,QAAL,CAAcvB,GAAzB,EAA8BxH,IAA9B,KAAuCF,IAAI,CAAC4E,KAAL,CAAW,KAAKsE,QAAL,CAAcxB,GAAzB,EAA8BxH,IAA9B,CAA3C,EAAgF;MAC9E,MAAM,IAAIe,yBAAJ,EAAN;;;IAEF,IAAMoI,YAAY,GAAG,KAAKP,SAAL,CAAeM,WAAW,CAAC9B,KAA3B,CAArB;IACA,IAAMgC,aAAa,GAAG,KAAKR,SAAL,CAAeM,WAAW,CAAC9B,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAKC,MAA7C,GAAsD,KAAKD,MAA1E,CAAtB;IACA,IAAMQ,kBAAkB,GAAGvJ,IAAI,CAACiG,QAAL,CAAcmD,WAAW,CAAC1B,GAA1B,EAA+BjH,IAA/B,CAA3B;IACA,IAAMoF,SAAS,GAAG7F,IAAI,CAACiG,QAAL,CAAcsD,kBAAd,EAAkCD,aAAa,CAAC5B,GAAhD,CAAlB;IACA,IAAM5B,WAAW,GAAG9F,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAACiG,QAAL,CAAcoD,YAAY,CAAC3B,GAA3B,EAAgChH,KAAhC,CAAT,EAAiD6I,kBAAjD,CAApB;IACA,IAAMC,YAAY,GAAG,IAAInC,WAAJ,CACnB+B,WAAW,CAAC9B,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKqE,MAA9B,IAAwC,KAAKC,MAA7C,GAAsD,KAAKD,MADxC,EAEnB/I,IAAI,CAAC6C,MAAL,CAAYgD,SAAZ,EAAuBC,WAAvB,CAFmB,CAArB;;IAIA,IAAI9F,IAAI,CAAC4E,KAAL,CAAW4E,YAAY,CAAC9B,GAAxB,EAA6BxH,IAA7B,CAAJ,EAAwC;MACtC,MAAM,IAAIqB,4BAAJ,EAAN;;;IAEF,OAAO,CAACiI,YAAD,EAAe,IAAI5B,IAAJ,CAASyB,YAAY,CAACzG,GAAb,CAAiBwG,WAAjB,CAAT,EAAwCE,aAAa,CAACpD,QAAd,CAAuBsD,YAAvB,CAAxC,CAAf,CAAP;GAxFJ;;EAAA,OA2FEC,cA3FF,GA2FE,wBAAeD,YAAf;IACE,EAAUA,YAAY,CAAClC,KAAb,CAAmB5C,MAAnB,CAA0B,KAAKqE,MAA/B,KAA0CS,YAAY,CAAClC,KAAb,CAAmB5C,MAAnB,CAA0B,KAAKsE,MAA/B,CAApD,4CAAApH,SAAS,QAAmF,OAAnF,CAAT,GAAAA,SAAS,OAAT;;IACA,IACE5B,IAAI,CAAC4E,KAAL,CAAW,KAAKqE,QAAL,CAAcvB,GAAzB,EAA8BxH,IAA9B,KACAF,IAAI,CAAC4E,KAAL,CAAW,KAAKsE,QAAL,CAAcxB,GAAzB,EAA8BxH,IAA9B,CADA,IAEAF,IAAI,CAAC2B,kBAAL,CAAwB6H,YAAY,CAAC9B,GAArC,EAA0C,KAAKoB,SAAL,CAAeU,YAAY,CAAClC,KAA5B,EAAmCI,GAA7E,CAHF,EAIE;MACA,MAAM,IAAIzG,yBAAJ,EAAN;;;IAGF,IAAMqI,aAAa,GAAG,KAAKR,SAAL,CAAeU,YAAY,CAAClC,KAA5B,CAAtB;IACA,IAAM+B,YAAY,GAAG,KAAKP,SAAL,CAAeU,YAAY,CAAClC,KAAb,CAAmB5C,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAKC,MAA9C,GAAuD,KAAKD,MAA3E,CAArB;IACA,IAAMlD,SAAS,GAAG7F,IAAI,CAACiG,QAAL,CAAcjG,IAAI,CAACiG,QAAL,CAAcoD,YAAY,CAAC3B,GAA3B,EAAgC8B,YAAY,CAAC9B,GAA7C,CAAd,EAAiEhH,KAAjE,CAAlB;IACA,IAAMoF,WAAW,GAAG9F,IAAI,CAACiG,QAAL,CAAcjG,IAAI,CAACkG,QAAL,CAAcoD,aAAa,CAAC5B,GAA5B,EAAiC8B,YAAY,CAAC9B,GAA9C,CAAd,EAAkEjH,IAAlE,CAApB;IACA,IAAM2I,WAAW,GAAG,IAAI/B,WAAJ,CAClBmC,YAAY,CAAClC,KAAb,CAAmB5C,MAAnB,CAA0B,KAAKqE,MAA/B,IAAyC,KAAKC,MAA9C,GAAuD,KAAKD,MAD1C,EAElB/I,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAAC6C,MAAL,CAAYgD,SAAZ,EAAuBC,WAAvB,CAAT,EAA8C3F,GAA9C,CAFkB,CAApB;IAIA,OAAO,CAACiJ,WAAD,EAAc,IAAIxB,IAAJ,CAASyB,YAAY,CAACzG,GAAb,CAAiBwG,WAAjB,CAAT,EAAwCE,aAAa,CAACpD,QAAd,CAAuBsD,YAAvB,CAAxC,CAAd,CAAP;GA7GJ;;EAAA,OAgHEE,kBAhHF,GAgHE,4BAAmBC,WAAnB,EAA6C9B,YAA7C,EAAwEC,YAAxE;IACE,CAAU6B,WAAW,CAACrC,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKsD,cAA9B,CAAV,2CAAApG,SAAS,QAAgD,WAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,IAAMmG,YAAY,GAAGF,YAAY,CAACP,KAAb,CAAmBzC,WAAnB,CAA+BiD,YAAY,CAACR,KAA5C;MACjB,CAACO,YAAD,EAAeC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeD,YAAf,CAFJ;IAGA,EAAUE,YAAY,CAAC,CAAD,CAAZ,CAAgBT,KAAhB,CAAsB5C,MAAtB,CAA6B,KAAKqE,MAAlC,KAA6ChB,YAAY,CAAC,CAAD,CAAZ,CAAgBT,KAAhB,CAAsB5C,MAAtB,CAA6B,KAAKsE,MAAlC,CAAvD,4CAAApH,SAAS,QAAyF,OAAzF,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAIgI,SAAJ;;IACA,IAAI5J,IAAI,CAAC4E,KAAL,CAAW+E,WAAW,CAACjC,GAAvB,EAA4BxH,IAA5B,CAAJ,EAAuC;MACrC0J,SAAS,GAAG5J,IAAI,CAACkG,QAAL,CAAc3D,IAAI,CAACvC,IAAI,CAACiG,QAAL,CAAc8B,YAAY,CAAC,CAAD,CAAZ,CAAgBL,GAA9B,EAAmCK,YAAY,CAAC,CAAD,CAAZ,CAAgBL,GAAnD,CAAD,CAAlB,EAA6E3H,iBAA7E,CAAZ;KADF,MAEO;MACL,IAAM8J,OAAO,GAAG7J,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACiG,QAAL,CAAc8B,YAAY,CAAC,CAAD,CAAZ,CAAgBL,GAA9B,EAAmCiC,WAAW,CAACjC,GAA/C,CAAZ,EAAiE,KAAKuB,QAAL,CAAcvB,GAA/E,CAAhB;MACA,IAAMoC,OAAO,GAAG9J,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACiG,QAAL,CAAc8B,YAAY,CAAC,CAAD,CAAZ,CAAgBL,GAA9B,EAAmCiC,WAAW,CAACjC,GAA/C,CAAZ,EAAiE,KAAKwB,QAAL,CAAcxB,GAA/E,CAAhB;MACAkC,SAAS,GAAG5J,IAAI,CAAC6B,eAAL,CAAqBgI,OAArB,EAA8BC,OAA9B,IAAyCD,OAAzC,GAAmDC,OAA/D;;;IAEF,IAAI,CAAC9J,IAAI,CAAC2C,WAAL,CAAiBiH,SAAjB,EAA4B1J,IAA5B,CAAL,EAAwC;MACtC,MAAM,IAAIqB,4BAAJ,EAAN;;;IAEF,OAAO,IAAI8F,WAAJ,CAAgB,KAAKW,cAArB,EAAqC4B,SAArC,CAAP;GAlIJ;;EAAA,OAqIEG,iBArIF,GAqIE,2BACEzC,KADF,EAEEqC,WAFF,EAGEC,SAHF,EAIEI,KAJF,EAKEC,KALF;QAIED;MAAAA,QAAiB;;;IAGjB,EAAU1C,KAAK,CAAC5C,MAAN,CAAa,KAAKqE,MAAlB,KAA6BzB,KAAK,CAAC5C,MAAN,CAAa,KAAKsE,MAAlB,CAAvC,4CAAApH,SAAS,QAAyD,OAAzD,CAAT,GAAAA,SAAS,OAAT;IACA,CAAU+H,WAAW,CAACrC,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAKsD,cAA9B,CAAV,2CAAApG,SAAS,QAAgD,cAAhD,CAAT,GAAAA,SAAS,OAAT;IACA,CAAUgI,SAAS,CAACtC,KAAV,CAAgB5C,MAAhB,CAAuB,KAAKsD,cAA5B,CAAV,2CAAApG,SAAS,QAA8C,WAA9C,CAAT,GAAAA,SAAS,OAAT;IACA,CAAU5B,IAAI,CAAC6B,eAAL,CAAqB+H,SAAS,CAAClC,GAA/B,EAAoCiC,WAAW,CAACjC,GAAhD,CAAV,2CAAA9F,SAAS,QAAuD,WAAvD,CAAT,GAAAA,SAAS,OAAT;IAEA,IAAIsI,mBAAJ;;IACA,IAAI,CAACF,KAAL,EAAY;MACVE,mBAAmB,GAAGP,WAAtB;KADF,MAEO;MACL,CAAU,CAAC,CAACM,KAAZ,2CAAArI,SAAS,QAAU,QAAV,CAAT,GAAAA,SAAS,OAAT;MACA,IAAMuI,WAAW,GAAG/H,cAAc,CAAC6H,KAAD,CAAlC;;MACA,IAAI,CAACjK,IAAI,CAAC4E,KAAL,CAAWuF,WAAX,EAAwBjK,IAAxB,CAAL,EAAoC;QAClC,IAAMkK,KAAK,GAAG7H,IAAI,CAACvC,IAAI,CAACiG,QAAL,CAAc,KAAKgD,QAAL,CAAcvB,GAA5B,EAAiC,KAAKwB,QAAL,CAAcxB,GAA/C,CAAD,CAAlB;QACA,IAAM2C,SAAS,GAAG9H,IAAI,CAAC4H,WAAD,CAAtB;;QACA,IAAInK,IAAI,CAAC2C,WAAL,CAAiByH,KAAjB,EAAwBC,SAAxB,CAAJ,EAAwC;UACtC,IAAMxE,SAAS,GAAG7F,IAAI,CAACiG,QAAL,CAAc0D,WAAW,CAACjC,GAA1B,EAA+B1H,IAAI,CAACkG,QAAL,CAAckE,KAAd,EAAqBC,SAArB,CAA/B,CAAlB;UACA,IAAMvE,WAAW,GAAG9F,IAAI,CAAC4C,GAAL,CAAS5C,IAAI,CAACiG,QAAL,CAAcmE,KAAd,EAAqB9J,IAArB,CAAT,EAAqC+J,SAArC,CAApB;UACA,IAAMC,YAAY,GAAGtK,IAAI,CAAC6C,MAAL,CAAYgD,SAAZ,EAAuBC,WAAvB,CAArB;UACAoE,mBAAmB,GAAGP,WAAW,CAAC/G,GAAZ,CAAgB,IAAIyE,WAAJ,CAAgB,KAAKW,cAArB,EAAqCsC,YAArC,CAAhB,CAAtB;SAJF,MAKO;UACLJ,mBAAmB,GAAGP,WAAtB;;OATJ,MAWO;QACLO,mBAAmB,GAAGP,WAAtB;;;;IAIJ,OAAO,IAAItC,WAAJ,CACLC,KADK,EAELtH,IAAI,CAAC6C,MAAL,CAAY7C,IAAI,CAACiG,QAAL,CAAc2D,SAAS,CAAClC,GAAxB,EAA6B,KAAKoB,SAAL,CAAexB,KAAf,EAAsBI,GAAnD,CAAZ,EAAqEwC,mBAAmB,CAACxC,GAAzF,CAFK,CAAP;GAvKJ;;EAAA;IAAA;IAAA,KAkDE;MACE,OAAO,KAAKK,YAAL,CAAkB,CAAlB,EAAqBT,KAA5B;;;IAnDJ;IAAA,KAsDE;MACE,OAAO,KAAKS,YAAL,CAAkB,CAAlB,EAAqBT,KAA5B;;;IAvDJ;IAAA,KA0DE;MACE,OAAO,KAAKS,YAAL,CAAkB,CAAlB,CAAP;;;IA3DJ;IAAA,KA8DE;MACE,OAAO,KAAKA,YAAL,CAAkB,CAAlB,CAAP;;;;EA/DJ;AAAA;;IClBawC,KAAb;EAAA;;;EAkBE,eAAYC,SAAZ,EAA8BC,UAA9B,EAAiD3E,WAAjD,EAAyED,SAAzE;;;IACE,6BAAMA,SAAN,EAAiBC,WAAjB;IAEA,MAAK0E,SAAL,GAAiBA,SAAjB;IACA,MAAKC,UAAL,GAAkBA,UAAlB;IACA,MAAKC,MAAL,GAAc,IAAI9E,QAAJ,CACZ5F,IAAI,CAACyH,YAAL,CAAkBlH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYuK,SAAS,CAACxG,QAAtB,CAAvB,CADY,EAEZhE,IAAI,CAACyH,YAAL,CAAkBlH,GAAlB,EAAuBP,IAAI,CAACC,MAAL,CAAYwK,UAAU,CAACzG,QAAvB,CAAvB,CAFY,CAAd;;;;EAvBJ,MAKS2G,SALT,GAKE,mBAAiBC,KAAjB;IACE,IAAMC,MAAM,GAAY,EAAxB;;IACA,qDAAwBD,KAAK,CAACE,KAAN,CAAYC,OAAZ,EAAxB,wCAA+C;MAAA;UAAnCC,CAAmC;UAAhCC,IAAgC;MAC7CJ,MAAM,CAACxH,IAAP,CACEuH,KAAK,CAACM,IAAN,CAAWF,CAAX,EAActG,MAAd,CAAqBuG,IAAI,CAAClC,MAA1B,IACI,IAAIwB,KAAJ,CAAUU,IAAI,CAAChC,QAAL,CAAc3B,KAAxB,EAA+B2D,IAAI,CAAC/B,QAAL,CAAc5B,KAA7C,EAAoD2D,IAAI,CAAChC,QAAL,CAAcvB,GAAlE,EAAuEuD,IAAI,CAAC/B,QAAL,CAAcxB,GAArF,CADJ,GAEI,IAAI6C,KAAJ,CAAUU,IAAI,CAAC/B,QAAL,CAAc5B,KAAxB,EAA+B2D,IAAI,CAAChC,QAAL,CAAc3B,KAA7C,EAAoD2D,IAAI,CAAC/B,QAAL,CAAcxB,GAAlE,EAAuEuD,IAAI,CAAChC,QAAL,CAAcvB,GAArF,CAHN;;;IAMF,OAAOmD,MAAM,CAACM,KAAP,CAAa,CAAb,EAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd;MAAA,OAA+BD,WAAW,CAACpF,QAAZ,CAAqBqF,YAArB,CAA/B;KAAvB,EAA0FT,MAAM,CAAC,CAAD,CAAhG,CAAP;GAdJ;;EAAA;;EAAA,OAqCE9E,MArCF,GAqCE;IACE,OAAO,IAAIwE,KAAJ,CAAU,KAAKE,UAAf,EAA2B,KAAKD,SAAhC,EAA2C,KAAK3E,SAAhD,EAA2D,KAAKC,WAAhE,CAAP;GAtCJ;;EAAA,OAyCEG,QAzCF,GAyCE,kBAAStB,KAAT;IACE,CAAU,KAAK8F,UAAL,CAAgB/F,MAAhB,CAAuBC,KAAK,CAAC6F,SAA7B,CAAV,2CAAA5I,SAAS,QAA0C,MAA1C,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAM2J,QAAQ,uBAAStF,QAAT,YAAkBtB,KAAlB,CAAd;;IACA,OAAO,IAAI4F,KAAJ,CAAU,KAAKC,SAAf,EAA0B7F,KAAK,CAAC8F,UAAhC,EAA4Cc,QAAQ,CAACzF,WAArD,EAAkEyF,QAAQ,CAAC1F,SAA3E,CAAP;GA5CJ;;;EAAA,OAgDE2F,KAhDF,GAgDE,eAAMC,WAAN;IACE,CAAUA,WAAW,CAACnE,KAAZ,CAAkB5C,MAAlB,CAAyB,KAAK8F,SAA9B,CAAV,2CAAA5I,SAAS,QAA2C,OAA3C,CAAT,GAAAA,SAAS,OAAT;IACA,OAAO,IAAIyF,WAAJ,CAAgB,KAAKoD,UAArB,EAAiC,oBAAMxE,QAAN,YAAewF,WAAW,CAAC/D,GAA3B,EAAgCb,QAAjE,CAAP;GAlDJ;;EAAA,OAqDET,aArDF,GAqDE,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;MAAAA,oBAA4B;;;IACxC,OAAO,KAAKqF,QAAL,CAActF,aAAd,CAA4BC,iBAA5B,EAA+CC,MAA/C,EAAuDC,QAAvD,CAAP;GAtDJ;;EAAA,OAyDEU,OAzDF,GAyDE,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;MAAAA,gBAAwB;;;IAC9B,OAAO,KAAK0E,QAAL,CAAczE,OAAd,CAAsBD,aAAtB,EAAqCV,MAArC,EAA6CC,QAA7C,CAAP;GA1DJ;;EAAA;IAAA;IAAA,KA6BE;MACE,OAAO,IAAIX,QAAJ,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,WAAlC,CAAP;;;IA9BJ;IAAA,KAiCE;MACE,2BAAaG,QAAb,YAAsB,KAAKyE,MAA3B;;;;EAlCJ;AAAA,EAA2B9E,QAA3B;;ICHa+F,KAAb;EAKE,eAAYb,KAAZ,EAA2Bc,KAA3B;IACE,EAAUd,KAAK,CAAC1H,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,CACEkJ,KAAK,CAACe,GAAN,CAAU,UAAAZ,IAAI;MAAA,OAAIA,IAAI,CAAClC,MAAL,CAAYhF,OAAZ,KAAwB+G,KAAK,CAAC,CAAD,CAAL,CAAS/B,MAAT,CAAgBhF,OAA5C;KAAd,EAAmE+H,KAAnE,CAAyE,UAAApJ,CAAC;MAAA,OAAIA,CAAJ;KAA1E,CADF,2CAAAd,SAAS,QAEP,WAFO,CAAT,GAAAA,SAAS,OAAT;IAIA,IAAMsJ,IAAI,GAAG,CAACU,KAAD,CAAb;;IACA,qDAAwBd,KAAK,CAACC,OAAN,EAAxB,wCAAyC;MAAA;UAA7BC,CAA6B;UAA1BC,IAA0B;MACvC,IAAMc,YAAY,GAAGb,IAAI,CAACF,CAAD,CAAzB;MACA,EAAUe,YAAY,CAACrH,MAAb,CAAoBuG,IAAI,CAAClC,MAAzB,KAAoCgD,YAAY,CAACrH,MAAb,CAAoBuG,IAAI,CAACjC,MAAzB,CAA9C,4CAAApH,SAAS,QAAuE,MAAvE,CAAT,GAAAA,SAAS,OAAT;MACA,IAAMoK,MAAM,GAAGD,YAAY,CAACrH,MAAb,CAAoBuG,IAAI,CAAClC,MAAzB,IAAmCkC,IAAI,CAACjC,MAAxC,GAAiDiC,IAAI,CAAClC,MAArE;MACAmC,IAAI,CAAC7H,IAAL,CAAU2I,MAAV;;;IAEF,EAAUd,IAAI,CAAC9H,MAAL,KAAgB,IAAI6I,GAAJ,CAAQf,IAAR,EAAcgB,IAAxC,4CAAAtK,SAAS,QAAqC,MAArC,CAAT,GAAAA,SAAS,OAAT;IAEA,KAAKkJ,KAAL,GAAaA,KAAb;IACA,KAAKI,IAAL,GAAYA,IAAZ;IACA,KAAKiB,QAAL,GAAgB5B,KAAK,CAACI,SAAN,CAAgB,IAAhB,CAAhB;;;EAtBJ;IAAA;IAAA,KAyBE;MACE,OAAO,KAAKO,IAAL,CAAU,CAAV,CAAP;;;IA1BJ;IAAA,KA6BE;MACE,OAAO,KAAKA,IAAL,CAAU,KAAKA,IAAL,CAAU9H,MAAV,GAAmB,CAA7B,CAAP;;;;EA9BJ;AAAA;;ACHA,IAAMgJ,YAAY,gBAAG,IAAIxG,QAAJ,CAAapF,IAAb,CAArB;;AAEA,IAAa6L,OAAb;EAAA;;EAAA;IAAA;;;EAAA;;EAAA,OACEjG,aADF,GACE,uBAAcC,iBAAd,EAA6CC,MAA7C,EAA8DC,QAA9D;QAAcF;MAAAA,oBAA4B;;;IACxC,OAAO,KAAKJ,QAAL,CAAcmG,YAAd,EAA4BhG,aAA5B,CAA0CC,iBAA1C,EAA6DC,MAA7D,EAAqEC,QAArE,CAAP;GAFJ;;EAAA,OAKEU,OALF,GAKE,iBAAQD,aAAR,EAAmCV,MAAnC,EAAoDC,QAApD;QAAQS;MAAAA,gBAAwB;;;IAC9B,OAAO,KAAKf,QAAL,CAAcmG,YAAd,EAA4BnF,OAA5B,CAAoCD,aAApC,EAAmDV,MAAnD,EAA2DC,QAA3D,CAAP;GANJ;;EAAA;AAAA,EAA6BX,QAA7B;;ACMA,SAAS0G,WAAT,CAAqBH,QAArB,EAAsC/C,WAAtC,EAAgEI,YAAhE;EACE,IAAM+C,UAAU,GAAGJ,QAAQ,CAACzE,GAAT,CAAazB,QAAb,CAAsBmD,WAAW,CAAC1B,GAAlC,CAAnB;;EAEA,IAAM8E,QAAQ,GAAGD,UAAU,CAACrG,QAAX,CAAoBsD,YAAY,CAAC9B,GAAjC,EAAsC7E,MAAtC,CAA6C0J,UAA7C,CAAjB;EACA,OAAO,IAAIF,OAAJ,CAAYG,QAAQ,CAAC3G,SAArB,EAAgC2G,QAAQ,CAAC1G,WAAzC,CAAP;AACD;AASD;;;AACA,SAAgB2G,sBAAsBC,GAAgBC;;EAEpD,CAAUD,CAAC,CAACtD,WAAF,CAAc9B,KAAd,CAAoB5C,MAApB,CAA2BiI,CAAC,CAACvD,WAAF,CAAc9B,KAAzC,CAAV,2CAAA1F,SAAS,QAAkD,aAAlD,CAAT,GAAAA,SAAS,OAAT;EACA,CAAU8K,CAAC,CAAClD,YAAF,CAAelC,KAAf,CAAqB5C,MAArB,CAA4BiI,CAAC,CAACnD,YAAF,CAAelC,KAA3C,CAAV,2CAAA1F,SAAS,QAAoD,cAApD,CAAT,GAAAA,SAAS,OAAT;;EACA,IAAI8K,CAAC,CAAClD,YAAF,CAAerD,OAAf,CAAuBwG,CAAC,CAACnD,YAAzB,CAAJ,EAA4C;IAC1C,IAAIkD,CAAC,CAACtD,WAAF,CAAcjD,OAAd,CAAsBwG,CAAC,CAACvD,WAAxB,CAAJ,EAA0C;MACxC,OAAO,CAAP;KAFwC;;;IAK1C,IAAIsD,CAAC,CAACtD,WAAF,CAActG,QAAd,CAAuB6J,CAAC,CAACvD,WAAzB,CAAJ,EAA2C;MACzC,OAAO,CAAC,CAAR;KADF,MAEO;MACL,OAAO,CAAP;;GARJ,MAUO;;IAEL,IAAIsD,CAAC,CAAClD,YAAF,CAAe1G,QAAf,CAAwB6J,CAAC,CAACnD,YAA1B,CAAJ,EAA6C;MAC3C,OAAO,CAAP;KADF,MAEO;MACL,OAAO,CAAC,CAAR;;;AAGL;;AAGD,SAAgBoD,gBAAgBF,GAAUC;EACxC,IAAME,MAAM,GAAGJ,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;;EACA,IAAIE,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAOA,MAAP;;;;EAIF,IAAIH,CAAC,CAACF,QAAF,CAAW1J,QAAX,CAAoB6J,CAAC,CAACH,QAAtB,CAAJ,EAAqC;IACnC,OAAO,CAAC,CAAR;GADF,MAEO,IAAIE,CAAC,CAACF,QAAF,CAAW7J,WAAX,CAAuBgK,CAAC,CAACH,QAAzB,CAAJ,EAAwC;IAC7C,OAAO,CAAP;;;;EAIF,OAAOE,CAAC,CAAC9B,KAAF,CAAQM,IAAR,CAAa9H,MAAb,GAAsBuJ,CAAC,CAAC/B,KAAF,CAAQM,IAAR,CAAa9H,MAA1C;AACD;AASD,IAAa0J,KAAb;EASE,eAAmBlC,KAAnB,EAAiCrD,MAAjC,EAAsDwF,SAAtD;IACE,CAAUxF,MAAM,CAACD,KAAP,CAAa5C,MAAb,CAAoBqI,SAAS,KAAKpN,SAAS,CAACqN,WAAxB,GAAsCpC,KAAK,CAACgB,KAA5C,GAAoDhB,KAAK,CAACoB,MAA9E,CAAV,2CAAApK,SAAS,QAAwF,OAAxF,CAAT,GAAAA,SAAS,OAAT;IACA,IAAMqL,OAAO,GAAkB,IAAIC,KAAJ,CAAUtC,KAAK,CAACM,IAAN,CAAW9H,MAArB,CAA/B;IACA,IAAM+J,SAAS,GAAW,IAAID,KAAJ,CAAUtC,KAAK,CAACE,KAAN,CAAY1H,MAAtB,CAA1B;;IACA,IAAI2J,SAAS,KAAKpN,SAAS,CAACqN,WAA5B,EAAyC;MACvCC,OAAO,CAAC,CAAD,CAAP,GAAa1F,MAAb;;MACA,KAAK,IAAIyD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACM,IAAN,CAAW9H,MAAX,GAAoB,CAAxC,EAA2C4H,CAAC,EAA5C,EAAgD;QAC9C,IAAMC,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,CAAZ,CAAb;;QACA,4BAAiCC,IAAI,CAAC9B,eAAL,CAAqB8D,OAAO,CAACjC,CAAD,CAA5B,CAAjC;YAAOxB,aAAP;YAAqB4D,QAArB;;QACAH,OAAO,CAACjC,CAAC,GAAG,CAAL,CAAP,GAAiBxB,aAAjB;QACA2D,SAAS,CAACnC,CAAD,CAAT,GAAeoC,QAAf;;KANJ,MAQO;MACLH,OAAO,CAACA,OAAO,CAAC7J,MAAR,GAAiB,CAAlB,CAAP,GAA8BmE,MAA9B;;MACA,KAAK,IAAIyD,EAAC,GAAGJ,KAAK,CAACM,IAAN,CAAW9H,MAAX,GAAoB,CAAjC,EAAoC4H,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;QAC9C,IAAMC,KAAI,GAAGL,KAAK,CAACE,KAAN,CAAYE,EAAC,GAAG,CAAhB,CAAb;;QACA,2BAAgCC,KAAI,CAACxB,cAAL,CAAoBwD,OAAO,CAACjC,EAAD,CAA3B,CAAhC;YAAO5B,YAAP;YAAoBgE,SAApB;;QACAH,OAAO,CAACjC,EAAC,GAAG,CAAL,CAAP,GAAiB5B,YAAjB;QACA+D,SAAS,CAACnC,EAAC,GAAG,CAAL,CAAT,GAAmBoC,SAAnB;;;;IAIJ,KAAKxC,KAAL,GAAaA,KAAb;IACA,KAAKmC,SAAL,GAAiBA,SAAjB;IACA,IAAM3D,WAAW,GAAG6D,OAAO,CAAC,CAAD,CAA3B;IACA,IAAMzD,YAAY,GAAGyD,OAAO,CAACA,OAAO,CAAC7J,MAAR,GAAiB,CAAlB,CAA5B;IACA,KAAKgG,WAAL,GAAmBA,WAAnB;IACA,KAAKI,YAAL,GAAoBA,YAApB;IACA,KAAK6D,cAAL,GAAsB,IAAI9C,KAAJ,CAAUK,KAAK,CAACgB,KAAhB,EAAuBhB,KAAK,CAACoB,MAA7B,EAAqC5C,WAAW,CAAC1B,GAAjD,EAAsD8B,YAAY,CAAC9B,GAAnE,CAAtB;IACA,KAAK4F,YAAL,GAAoB/C,KAAK,CAACI,SAAN,CAAgB,IAAIgB,KAAJ,CAAUwB,SAAV,EAAqBvC,KAAK,CAACgB,KAA3B,CAAhB,CAApB;IACA,KAAKY,QAAL,GAAgBF,WAAW,CAAC1B,KAAK,CAACuB,QAAP,EAAiB/C,WAAjB,EAA8BI,YAA9B,CAA3B;GAvCJ;;;EAAA;;EAAA,OA2CS+D,gBA3CT,GA2CS,0BAAiBC,iBAAjB;IACL,CAAU,CAACA,iBAAiB,CAAC1K,QAAlB,CAA2B5C,IAA3B,CAAX,2CAAA0B,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI,KAAKmL,SAAL,KAAmBpN,SAAS,CAAC8N,YAAjC,EAA+C;MAC7C,OAAO,KAAKjE,YAAZ;KADF,MAEO;MACL,OAAO,IAAInC,WAAJ,CACL,KAAKmC,YAAL,CAAkBlC,KADb,EAEL,IAAI1B,QAAJ,CAAazF,GAAb,EACGyC,GADH,CACO4K,iBADP,EAEGzH,MAFH,GAGGE,QAHH,CAGY,KAAKuD,YAAL,CAAkB9B,GAH9B,EAGmCb,QAL9B,CAAP;;GAhDN;;;EAAA,OA2DS6G,eA3DT,GA2DS,yBAAgBF,iBAAhB;IACL,CAAU,CAACA,iBAAiB,CAAC1K,QAAlB,CAA2B5C,IAA3B,CAAX,2CAAA0B,SAAS,QAAoC,oBAApC,CAAT,GAAAA,SAAS,OAAT;;IACA,IAAI,KAAKmL,SAAL,KAAmBpN,SAAS,CAACqN,WAAjC,EAA8C;MAC5C,OAAO,KAAK5D,WAAZ;KADF,MAEO;MACL,OAAO,IAAI/B,WAAJ,CACL,KAAK+B,WAAL,CAAiB9B,KADZ,EAEL,IAAI1B,QAAJ,CAAazF,GAAb,EAAkByC,GAAlB,CAAsB4K,iBAAtB,EAAyCvH,QAAzC,CAAkD,KAAKmD,WAAL,CAAiB1B,GAAnE,EAAwEb,QAFnE,CAAP;;GAhEN;;;;;;EAAA,MA2EgB8G,gBA3EhB,GA2ES,0BACL7C,KADK,EAEL8C,QAFK,EAGLC,QAHK;EAMLC,YANK,EAOLC,gBAPK,EAQLC,UARK;kCAIkD;kCAArDC;QAAAA,gDAAgB;4BAAGC;QAAAA,oCAAU;;QAE/BJ;MAAAA,eAAuB;;;QACvBC;MAAAA,mBAAgCH;;;QAChCI;MAAAA,aAAsB;;;IAEtB,EAAUlD,KAAK,CAAC1H,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,EAAUsM,OAAO,GAAG,CAApB,4CAAAtM,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;IACA,EAAUmM,gBAAgB,KAAKH,QAArB,IAAiCE,YAAY,CAAC1K,MAAb,GAAsB,CAAjE,4CAAAxB,SAAS,QAA2D,mBAA3D,CAAT,GAAAA,SAAS,OAAT;;IAEA,KAAK,IAAIoJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC1H,MAA1B,EAAkC4H,CAAC,EAAnC,EAAuC;MACrC,IAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;MAGrC,IAAI,CAACC,IAAI,CAAClC,MAAL,CAAYrE,MAAZ,CAAmBkJ,QAAQ,CAACtG,KAA5B,CAAD,IAAuC,CAAC2D,IAAI,CAACjC,MAAL,CAAYtE,MAAZ,CAAmBkJ,QAAQ,CAACtG,KAA5B,CAA5C,EAAgF;MAChF,IAAI2D,IAAI,CAAChC,QAAL,CAAc9C,OAAd,CAAsBjG,IAAtB,KAA+B+K,IAAI,CAAC/B,QAAL,CAAc/C,OAAd,CAAsBjG,IAAtB,CAAnC,EAAgE;;MAEhE,IAAIiO,UAAsB,SAA1B;;MACA,IAAI;QACF;;QADE,6BACalD,IAAI,CAAC9B,eAAL,CAAqByE,QAArB,CADb;;QACAO,UADA;OAAJ,CAEE,OAAOhM,KAAP,EAAc;;QAEd,IAAIA,KAAK,CAACiM,8BAAV,EAA0C;UACxC;;;QAEF,MAAMjM,KAAN;OAdmC;;;MAiBrC,IAAIgM,UAAU,CAAC7G,KAAX,CAAiB5C,MAAjB,CAAwBmJ,QAAxB,CAAJ,EAAuC;QACrC7K,YAAY,CACVgL,UADU,EAEV,IAAIlB,KAAJ,CACE,IAAInB,KAAJ,WAAcmC,YAAd,GAA4B7C,IAA5B,IAAmC8C,gBAAgB,CAACzG,KAApD,CADF,EAEEyG,gBAFF,EAGEpO,SAAS,CAACqN,WAHZ,CAFU,EAOViB,aAPU,EAQVrB,eARU,CAAZ;OADF,MAWO,IAAIsB,OAAO,GAAG,CAAV,IAAepD,KAAK,CAAC1H,MAAN,GAAe,CAAlC,EAAqC;QAC1C,IAAMiL,sBAAsB,GAAGvD,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeH,CAAf,EAAkBsD,MAAlB,CAAyBxD,KAAK,CAACK,KAAN,CAAYH,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC1H,MAAzB,CAAzB,CAA/B,CAD0C;;QAI1C0J,KAAK,CAACa,gBAAN,CACEU,sBADF,EAEEF,UAFF,EAGEN,QAHF,EAIE;UACEI,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;SANvB,YAQMJ,YARN,GAQoB7C,IARpB,IASE8C,gBATF,EAUEC,UAVF;;;;IAeJ,OAAOA,UAAP;GAxIJ;;;;;;;EAAA,MAgJgBO,iBAhJhB,GAgJS,2BACLzD,KADK,EAEL0D,OAFK,EAGLL,SAHK;EAMLL,YANK,EAOLW,iBAPK,EAQLT,UARK;oCAIkD;oCAArDC;QAAAA,iDAAgB;8BAAGC;QAAAA,qCAAU;;QAE/BJ;MAAAA,eAAuB;;;QACvBW;MAAAA,oBAAiCN;;;QACjCH;MAAAA,aAAsB;;;IAEtB,EAAUlD,KAAK,CAAC1H,MAAN,GAAe,CAAzB,4CAAAxB,SAAS,QAAmB,OAAnB,CAAT,GAAAA,SAAS,OAAT;IACA,EAAUsM,OAAO,GAAG,CAApB,4CAAAtM,SAAS,QAAc,UAAd,CAAT,GAAAA,SAAS,OAAT;IACA,EAAU6M,iBAAiB,KAAKN,SAAtB,IAAmCL,YAAY,CAAC1K,MAAb,GAAsB,CAAnE,4CAAAxB,SAAS,QAA6D,mBAA7D,CAAT,GAAAA,SAAS,OAAT;;IAEA,KAAK,IAAIoJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAAC1H,MAA1B,EAAkC4H,CAAC,EAAnC,EAAuC;MACrC,IAAMC,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAlB,CADqC;;MAGrC,IAAI,CAACC,IAAI,CAAClC,MAAL,CAAYrE,MAAZ,CAAmByJ,SAAS,CAAC7G,KAA7B,CAAD,IAAwC,CAAC2D,IAAI,CAACjC,MAAL,CAAYtE,MAAZ,CAAmByJ,SAAS,CAAC7G,KAA7B,CAA7C,EAAkF;MAClF,IAAI2D,IAAI,CAAChC,QAAL,CAAc9C,OAAd,CAAsBjG,IAAtB,KAA+B+K,IAAI,CAAC/B,QAAL,CAAc/C,OAAd,CAAsBjG,IAAtB,CAAnC,EAAgE;;MAEhE,IAAI0N,SAAqB,SAAzB;;MACA,IAAI;QACF;;QADE,4BACY3C,IAAI,CAACxB,cAAL,CAAoB0E,SAApB,CADZ;;QACAP,SADA;OAAJ,CAEE,OAAOzL,KAAP,EAAc;;QAEd,IAAIA,KAAK,CAACuM,2BAAV,EAAuC;UACrC;;;QAEF,MAAMvM,KAAN;OAdmC;;;MAiBrC,IAAIyL,SAAS,CAACtG,KAAV,CAAgB5C,MAAhB,CAAuB8J,OAAvB,CAAJ,EAAqC;QACnCxL,YAAY,CACVgL,UADU,EAEV,IAAIlB,KAAJ,CAAU,IAAInB,KAAJ,EAAWV,IAAX,SAAoB6C,YAApB,GAAmCU,OAAnC,CAAV,EAAuDC,iBAAvD,EAA0E9O,SAAS,CAAC8N,YAApF,CAFU,EAGVQ,aAHU,EAIVrB,eAJU,CAAZ;OADF,MAOO,IAAIsB,OAAO,GAAG,CAAV,IAAepD,KAAK,CAAC1H,MAAN,GAAe,CAAlC,EAAqC;QAC1C,IAAMiL,sBAAsB,GAAGvD,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeH,CAAf,EAAkBsD,MAAlB,CAAyBxD,KAAK,CAACK,KAAN,CAAYH,CAAC,GAAG,CAAhB,EAAmBF,KAAK,CAAC1H,MAAzB,CAAzB,CAA/B,CAD0C;;QAI1C0J,KAAK,CAACyB,iBAAN,CACEF,sBADF,EAEEG,OAFF,EAGEZ,SAHF,EAIE;UACEK,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;SANvB,GAQGjD,IARH,SAQY6C,YARZ,GASEW,iBATF,EAUET,UAVF;;;;IAeJ,OAAOA,UAAP;GAzMJ;;EAAA;AAAA;;;;"}